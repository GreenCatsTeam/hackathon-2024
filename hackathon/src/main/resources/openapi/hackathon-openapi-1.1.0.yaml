openapi: 3.0.3
info:
  title: CleanMap API
  description: "API для CleanMap"
  version: 1.1.0
servers:
  - url: https://cleanmap.com/
tags:
  - name: users
    description: Работа с пользователями
  - name: authorization
    description: Авторизация
  - name: cards
    description: Карточка
  - name: admin
    description: Работа с админкой
paths:
  /cards/addUserToCleaning:
    post:
      operationId: addUserToCleaning
      tags:
        - cards
      summary: Добавить человеку карточку
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CleaningRequest'
        required: true
      responses:
        "200":
          description: Уборка успешно добавлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        "400":
          description: Некорректные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        "404":
          description: Уборка с указанным ID не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /cards/nearCards:
    get:
      operationId: getNearCards
      tags:
        - cards
      parameters:
        - name: x1
          in: query
          description: левый нижний угол
          required: true
          schema:
            type: number
            format: double
        - name: y1
          in: query
          description: левый нижний угол
          required: true
          schema:
            type: number
            format: double
        - name: x2
          in: query
          description: правый верхний угол
          required: true
          schema:
            type: number
            format: double
        - name: y2
          in: query
          description: правый верхний угол
          required: true
          schema:
            type: number
            format: double
      responses:
        "200":
          description: Карточки успешно получены
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IdResponse'
        "400":
          description: Некорректные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        "404":
          description: Карточка с указанным ID не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /cards/{id}:
    get:
      operationId: getCard
      tags:
        - cards
      summary: Получить карточку
      parameters:
        - name: id
          in: path
          description: ID карточки
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Карточка получена успешна
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        "400":
          description: Некорректные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        "404":
          description: Карточка с указанным ID не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
    put:
      operationId: updateCard
      tags:
        - cards
      summary: Изменить сложность карточки и её статус
      parameters:
        - name: id
          in: path
          description: ID карточки
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCardRequest'
        required: true
      responses:
        "200":
          description: Карточка изменена успешна
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        "400":
          description: Некорректные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        "404":
          description: Карточка с указанным ID не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
    delete:
      operationId: deleteCard
      tags:
        - cards
      summary: Удалить карточку
      parameters:
        - name: id
          in: path
          description: ID карточки
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Карточка успешна удалена
        "400":
          description: Некорректные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        "404":
          description: Карточка с указанным ID не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /cards/admin/approve/{id}:
    post:
      parameters:
        - name: id
          in: path
          description: ID карточки
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      operationId: adminApproveCard
      tags:
        - cards
      summary: Апрувнуть карточку админом (пройти модерацию)
      responses:
        "200":
          description: Карточка получена успешна
        "400":
          description: Некорректные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        "404":
          description: Карточка с указанным ID не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /cards/approve/{id}:
    post:
      parameters:
        - name: id
          in: path
          description: ID карточки
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      operationId: approveCard
      tags:
        - cards
      summary: Апрувнуть карточку
      responses:
        "200":
          description: Карточка получена успешна
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountResponse'
        "400":
          description: Некорректные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        "404":
          description: Карточка с указанным ID не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /cards:
    post:
      operationId: createCard
      tags:
        - cards
      summary: Создать карточку
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardRequest'
        required: true
      responses:
        "200":
          description: Карточка получена успешна
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        "400":
          description: Некорректные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        "404":
          description: Карточка с указанным ID не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
    get:
      tags:
        - cards
      operationId: getListCards
      summary: Получить список карточек
      description: Возвращает список карточек со смещением offset и количеством limit
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 30
            minimum: 1
            maximum: 100
          description: Количество возвращаемых карточек
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
            minimum: 0
          description: Смещение по количеству карточек
      responses:
        '200':
          description: Получен смещенный список карточек
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CardListInfo'
  /admin/users:
    get:
      tags:
        - admin
      summary: Получить список пользователей
      description: Возвращает список пользователей со смещением offset и количеством limit
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 100
          description: Количество возвращаемых пользователей
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
            minimum: 0
          description: Смещение по количеству пользователей
      responses:
        '200':
          description: Получен смещенный список пользователей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserInfoForAdminPanel'
  /admin/users/{id}:
    post:
      operationId: banUserById
      parameters:
        - name: id
          in: path
          description: ID пользователя
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      tags:
        - admin
      summary: Забанить пользователя
      responses:
        "200":
          description: Пользователь успешно забанен
        "400":
          description: Некорректные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        "404":
          description: Пользователь с указанным ID не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /admin/userRights/{id}:
    post:
      operationId: changeUserRights
      parameters:
        - name: id
          in: path
          description: ID пользователя
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
        - name: role
          in: query
          description: Роль пользователя
          required: true
          schema:
            type: string
      tags:
        - admin
      summary: Изменить права пользователя
      responses:
        "200":
          description: Права пользователя успешно обновлены
        "400":
          description: Некорректные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        "404":
          description: Пользователь с указанным ID не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /auth/registration:
    post:
      operationId: performRegistration
      tags:
        - authorization
      summary: Регистрация пользователя
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
        required: true
      responses:
        "200":
          description: Пользователь создан успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTToken'
        "400":
          description: Некорректные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        "409":
          description: Пользователь с таким email уже зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /auth/login:
    post:
      operationId: performLogin
      tags:
        - authorization
      summary: Авторизация пользователя
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizeUserRequest'
        required: true
      responses:
        "200":
          description: Пользователь авторизован успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTToken'
        "400":
          description: Некорректные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        "404":
          description: Пользователь с такими данными не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /users/{id}:
    put:
      tags:
        - users
      summary: Редактировать пользователя
      parameters:
        - name: id
          in: path
          description: ID профиля
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditUserRequest'
        required: true
      responses:
        "200":
          description: Данные пользователя успешно обновлены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        "400":
          description: Некорректные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        "404":
          description: Профиль с указанным ID не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
    delete:
      tags:
        - users
      summary: Удаление пользователя
      parameters:
        - name: id
          in: path
          description: "ID пользователя, который удаляется"
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Пользователя успешно удален
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        "400":
          description: Некорректные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        "404":
          description: Пользователь с указанным ID не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
    get:
      tags:
        - users
      operationId: getUserCardsList
      summary: Получить список карточек
      description: Возвращает список карточек со смещением offset и количеством limit
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 30
            minimum: 1
            maximum: 100
          description: Количество возвращаемых карточек
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
            minimum: 0
          description: Смещение по количеству карточек
        - name: id
          in: path
          description: "ID пользователя, карточки которого получаем"
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Получен смещенный список карточек пользователя
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CardListInfo'
components:
  schemas:
    RegisterUserRequest:
      type: object
      properties:
        firstName:
          type: string
          description: Имя
        lastName:
          type: string
          description: Фамилия
        email:
          type: string
          description: Email
        password:
          type: string
          description: Пароль пользователя
        role:
          type: string
          description: Роль пользователя
        organization:
          type: string
          description: Организация
        cityName:
          type: string
          description: Название города
        districtName:
          type: string
          description: Название района
    CardListInfo:
      type: object
      properties:
        cardId:
          type: integer
          description: Id карточки
          format: int64
        complexity:
          type: integer
          description: Сложность уборки
          format: int32
        longitude:
          type: number
          description: Долгота
          format: double
        latitude:
          type: number
          description: Ширина
          format: double
        statusId:
          type: integer
          description: Id статуса
          format: int64
        cityName:
          type: string
          description: Название города
        districtName:
          type: string
          description: Название района
    UserInfoForAdminPanel:
      type: object
      properties:
        userId:
          type: integer
          description: Id пользователя
          format: int64
        firstName:
          type: string
          description: Имя
        lastName:
          type: string
          description: Фамилия
        email:
          type: string
          description: Email
        role:
          type: string
          description: Роль пользователя
        isBanned:
          type: boolean
          description: Забанен ли пользователь
    CardRequest:
      type: object
      properties:
        userId:
          type: integer
          description: Id пользователя
          format: int64
        complexity:
          type: integer
          description: Сложность уборки
          format: int32
        comment:
          type: string
          description: Комментарий
        photo:
          type: string
          description: Фотка в виде массива байт, закодированного в base64
        longitude:
          type: number
          description: Долгота
          format: double
        latitude:
          type: number
          description: Ширина
          format: double
        cityName:
          type: string
          description: Название города
        districtName:
          type: string
          description: Название района
    CleaningRequest:
      type: object
      properties:
        cardId:
          type: integer
          description: Id карточки
          format: int64
        userId:
          type: integer
          description: Id пользователя
          format: int64
    CountResponse:
      type: object
      properties:
        count:
          type: integer
          description: Количество апрувов
          format: int32
    CardResponse:
      type: object
      properties:
        userId:
          type: integer
          description: Id пользователя
          format: int64
        cardId:
          type: integer
          description: ID карты
          format: int64
        complexity:
          type: integer
          description: Сложность уборки
          format: int32
        comment:
          type: string
          description: Комментарий
        photo:
          type: string
          description: Ссылка на фотографию
        longitude:
          type: number
          description: Долгота
          format: double
        latitude:
          type: number
          description: Ширина
          format: double
        points:
          type: integer
          description: Вознаграждения
          format: int32
        statusId:
          type: integer
          description: Id статуса
          format: int64
        cityName:
          type: string
          description: Название города
        districtName:
          type: string
          description: Название района
    UpdateCardRequest:
      type: object
      properties:
        complexity:
          type: integer
          description: Сложность новой уборки
          format: int32
        statusId:
          type: integer
          description: Id нового статуса
          format: int64
        userId:
          type: integer
          description: Id человека
          format: int64
    AuthorizeUserRequest:
      type: object
      properties:
        email:
          type: string
          description: Email
        password:
          type: string
          description: Пароль пользователя
    EditUserRequest:
      type: object
      properties:
        first_name:
          type: string
          description: Имя пользователя
        last_name:
          type: string
          description: Фамилия пользователя
        email:
          type: string
          description: Email
        password:
          type: string
          description: Пароль пользователя
        role:
          type: string
          description: Роль пользователя
        organization:
          type: string
          description: Организация пользователя
    IdResponse:
      type: object
      properties:
        id:
          type: integer
          description: ID пользователя
          format: int64
    JWTToken:
      type: object
      properties:
        jwtToken:
          type: string
          description: JWT токен пользователя
    ApiErrorResponse:
      type: object
      properties:
        description:
          type: string
        code:
          type: string
        exceptionName:
          type: string
        exceptionMessage:
          type: string
        stacktrace:
          type: array
          items:
            type: string
